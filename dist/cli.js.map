{"version":3,"sources":["../src/cli.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { cosmiconfig } from 'cosmiconfig'\n\nexport async function main(argv: string[]) {\n    const configExplorer = cosmiconfig('rcmd')\n    const explorerResult = await configExplorer.search()\n    if (explorerResult === null) {\n        throw Error('No rcmd config found')\n    }\n    const { config } = explorerResult\n    const { envs, basePath } = config\n    const envOptions = Object.keys(envs).map((key) => `--${key}`)\n    const [envOption] = argv.filter((arg) => envOptions.includes(arg))\n    if (!envOption) {\n        throw Error('No env option specified')\n    }\n    const env = envOption.replace('--', '')\n    const envHost = config.envs[env]\n    const finalArgv = argv.filter((arg) => !envOptions.includes(arg))\n    const path = argv[2]\n    const result = await fetch(\n        `${envHost}/${basePath}/${path}?argv=${finalArgv.join(' ')}`,\n        { headers: { authorization: `Bearer ${process.env.RCMD_SECRET}` } }\n    )\n    const body = await result.json()\n}\n\nmain(process.argv)\n"],"mappings":";AACA,OAAS,eAAAA,MAAmB,cAE5B,eAAsBC,EAAKC,EAAgB,CAEvC,IAAMC,EAAiB,MADAH,EAAY,MAAM,EACG,OAAO,EACnD,GAAIG,IAAmB,KACnB,MAAM,MAAM,sBAAsB,EAEtC,GAAM,CAAE,OAAAC,CAAO,EAAID,EACb,CAAE,KAAAE,EAAM,SAAAC,CAAS,EAAIF,EACrBG,EAAa,OAAO,KAAKF,CAAI,EAAE,IAAKG,GAAQ,KAAKA,CAAG,EAAE,EACtD,CAACC,CAAS,EAAIP,EAAK,OAAQQ,GAAQH,EAAW,SAASG,CAAG,CAAC,EACjE,GAAI,CAACD,EACD,MAAM,MAAM,yBAAyB,EAEzC,IAAME,EAAMF,EAAU,QAAQ,KAAM,EAAE,EAChCG,EAAUR,EAAO,KAAKO,CAAG,EACzBE,EAAYX,EAAK,OAAQQ,GAAQ,CAACH,EAAW,SAASG,CAAG,CAAC,EAC1DI,EAAOZ,EAAK,CAAC,EAKba,EAAO,MAJE,MAAM,MACjB,GAAGH,CAAO,IAAIN,CAAQ,IAAIQ,CAAI,SAASD,EAAU,KAAK,GAAG,CAAC,GAC1D,CAAE,QAAS,CAAE,cAAe,UAAU,QAAQ,IAAI,WAAW,EAAG,CAAE,CACtE,GAC0B,KAAK,CACnC,CAEAZ,EAAK,QAAQ,IAAI","names":["cosmiconfig","main","argv","explorerResult","config","envs","basePath","envOptions","key","envOption","arg","env","envHost","finalArgv","path","body"]}