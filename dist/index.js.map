{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import arg, { type Spec } from 'arg'\n\nexport type ProcessResult = {\n    status: number\n    body: any\n}\n\nexport type CommandOptions = {\n    [key: string]: any\n}\n\nexport function parseCmdUrl(url: string) {\n    const query = new URL(url).searchParams.get('argv')\n    let argv: string[] = []\n    if (query !== null) {\n        argv = query.split(' ')\n    }\n    return argv\n}\n\nexport async function processCmdReq(\n    req: Request,\n    parse: (argv: string[]) => Promise<void>\n): Promise<ProcessResult> {\n    const authHeader = req.headers.get('authorization')\n    if (authHeader !== `Bearer ${process.env.RCMD_SECRET}`) {\n        return {\n            status: 401,\n            body: { success: false },\n        }\n    }\n    try {\n        const argv = parseCmdUrl(req.url)\n        await parse(argv)\n        return {\n            status: 200,\n            body: { success: true },\n        }\n    } catch (error) {\n        return {\n            status: 500,\n            body: { success: false, error },\n        }\n    }\n}\n\nexport class Command {\n    _spec: Spec\n    _action: (...args: any[]) => Promise<void>\n    constructor(spec: Spec, action: (...args: any[]) => Promise<void>) {\n        this._spec = spec\n        this._action = action\n    }\n    parse(req: Request) {\n        if (this._action !== null && this._spec !== null) {\n            return processCmdReq(req, async (argv) => {\n                const args = arg(this._spec, {\n                    permissive: false,\n                    argv: argv.slice(3),\n                })\n                const { _: actionArgs, ...options } = args\n                const actionOptions = Object.entries(options).reduce(\n                    (acc: CommandOptions, [key, value]) => {\n                        acc[key.replace('--', '')] = value\n                        return acc\n                    },\n                    {}\n                )\n                await this._action(...actionArgs, actionOptions)\n            })\n        }\n    }\n}\n"],"mappings":"AAAA,OAAOA,MAAwB,MAWxB,SAASC,EAAYC,EAAa,CACrC,IAAMC,EAAQ,IAAI,IAAID,CAAG,EAAE,aAAa,IAAI,MAAM,EAC9CE,EAAiB,CAAC,EACtB,OAAID,IAAU,OACVC,EAAOD,EAAM,MAAM,GAAG,GAEnBC,CACX,CAEA,eAAsBC,EAClBC,EACAC,EACsB,CAEtB,GADmBD,EAAI,QAAQ,IAAI,eAAe,IAC/B,UAAU,QAAQ,IAAI,WAAW,GAChD,MAAO,CACH,OAAQ,IACR,KAAM,CAAE,QAAS,EAAM,CAC3B,EAEJ,GAAI,CACA,IAAMF,EAAOH,EAAYK,EAAI,GAAG,EAChC,aAAMC,EAAMH,CAAI,EACT,CACH,OAAQ,IACR,KAAM,CAAE,QAAS,EAAK,CAC1B,CACJ,OAASI,EAAO,CACZ,MAAO,CACH,OAAQ,IACR,KAAM,CAAE,QAAS,GAAO,MAAAA,CAAM,CAClC,CACJ,CACJ,CAEO,IAAMC,EAAN,KAAc,CACjB,MACA,QACA,YAAYC,EAAYC,EAA2C,CAC/D,KAAK,MAAQD,EACb,KAAK,QAAUC,CACnB,CACA,MAAML,EAAc,CAChB,GAAI,KAAK,UAAY,MAAQ,KAAK,QAAU,KACxC,OAAOD,EAAcC,EAAK,MAAOF,GAAS,CACtC,IAAMQ,EAAOZ,EAAI,KAAK,MAAO,CACzB,WAAY,GACZ,KAAMI,EAAK,MAAM,CAAC,CACtB,CAAC,EACK,CAAE,EAAGS,EAAY,GAAGC,CAAQ,EAAIF,EAChCG,EAAgB,OAAO,QAAQD,CAAO,EAAE,OAC1C,CAACE,EAAqB,CAACC,EAAKC,CAAK,KAC7BF,EAAIC,EAAI,QAAQ,KAAM,EAAE,CAAC,EAAIC,EACtBF,GAEX,CAAC,CACL,EACA,MAAM,KAAK,QAAQ,GAAGH,EAAYE,CAAa,CACnD,CAAC,CAET,CACJ","names":["arg","parseCmdUrl","url","query","argv","processCmdReq","req","parse","error","Command","spec","action","args","actionArgs","options","actionOptions","acc","key","value"]}