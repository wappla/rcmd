{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import arg, { type Spec } from 'arg'\n\nexport type ProcessResult = {\n    status: number\n    body: any\n}\n\nexport type ParseArgvResult = {\n    args: string[]\n    options: CommandOptions\n}\n\nexport type CommandOptions = {\n    [key: string]: any\n}\n\nexport function parseCmdUrl(url: string) {\n    const query = new URL(url).searchParams.get('argv')\n    let argv: string[] = []\n    if (query !== null) {\n        argv = query.split(' ')\n    }\n    return argv\n}\n\nexport async function processCmdReq(\n    req: Request,\n    parse: (argv: string[]) => ParseArgvResult,\n    cmd: (...args: any[]) => Promise<any>\n): Promise<ProcessResult> {\n    const authHeader = req.headers.get('authorization')\n    if (authHeader !== `Bearer ${process.env.RCMD_SECRET}`) {\n        return {\n            status: 401,\n            body: { success: false },\n        }\n    }\n    try {\n        const argv = parseCmdUrl(req.url)\n        const { args, options } = parse(argv)\n        const result = await cmd(...args, options)\n        return {\n            status: 200,\n            body: { success: true, result },\n        }\n    } catch (error) {\n        return {\n            status: 500,\n            body: { success: false, error },\n        }\n    }\n}\n\nexport function parseArgv(argv: string[], spec: Spec): ParseArgvResult {\n    const result = arg(spec, {\n        permissive: false,\n        argv: argv.slice(3),\n    })\n    const { _: args, ...rest } = result\n    const options = Object.entries(rest).reduce(\n        (acc: CommandOptions, [key, value]) => {\n            acc[key.replace('--', '')] = value\n            return acc\n        },\n        {}\n    )\n    return { args, options }\n}\n\nexport async function parseCmdReq(\n    req: Request,\n    spec: Spec,\n    cmd: (...args: any[]) => Promise<any>\n) {\n    return processCmdReq(req, (argv: string[]) => parseArgv(argv, spec), cmd)\n}\n"],"mappings":"AAAA,OAAOA,MAAwB,MAgBxB,SAASC,EAAYC,EAAa,CACrC,IAAMC,EAAQ,IAAI,IAAID,CAAG,EAAE,aAAa,IAAI,MAAM,EAC9CE,EAAiB,CAAC,EACtB,OAAID,IAAU,OACVC,EAAOD,EAAM,MAAM,GAAG,GAEnBC,CACX,CAEA,eAAsBC,EAClBC,EACAC,EACAC,EACsB,CAEtB,GADmBF,EAAI,QAAQ,IAAI,eAAe,IAC/B,UAAU,QAAQ,IAAI,WAAW,GAChD,MAAO,CACH,OAAQ,IACR,KAAM,CAAE,QAAS,EAAM,CAC3B,EAEJ,GAAI,CACA,IAAMF,EAAOH,EAAYK,EAAI,GAAG,EAC1B,CAAE,KAAAG,EAAM,QAAAC,CAAQ,EAAIH,EAAMH,CAAI,EAEpC,MAAO,CACH,OAAQ,IACR,KAAM,CAAE,QAAS,GAAM,OAHZ,MAAMI,EAAI,GAAGC,EAAMC,CAAO,CAGP,CAClC,CACJ,OAASC,EAAO,CACZ,MAAO,CACH,OAAQ,IACR,KAAM,CAAE,QAAS,GAAO,MAAAA,CAAM,CAClC,CACJ,CACJ,CAEO,SAASC,EAAUR,EAAgBS,EAA6B,CACnE,IAAMC,EAASd,EAAIa,EAAM,CACrB,WAAY,GACZ,KAAMT,EAAK,MAAM,CAAC,CACtB,CAAC,EACK,CAAE,EAAGK,EAAM,GAAGM,CAAK,EAAID,EACvBJ,EAAU,OAAO,QAAQK,CAAI,EAAE,OACjC,CAACC,EAAqB,CAACC,EAAKC,CAAK,KAC7BF,EAAIC,EAAI,QAAQ,KAAM,EAAE,CAAC,EAAIC,EACtBF,GAEX,CAAC,CACL,EACA,MAAO,CAAE,KAAAP,EAAM,QAAAC,CAAQ,CAC3B,CAEA,eAAsBS,EAClBb,EACAO,EACAL,EACF,CACE,OAAOH,EAAcC,EAAMF,GAAmBQ,EAAUR,EAAMS,CAAI,EAAGL,CAAG,CAC5E","names":["arg","parseCmdUrl","url","query","argv","processCmdReq","req","parse","cmd","args","options","error","parseArgv","spec","result","rest","acc","key","value","parseCmdReq"]}